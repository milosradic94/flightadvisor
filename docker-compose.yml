version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data

  mysqldb:
    image: mariadb:10.4.21
    restart: unless-stopped
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_DATABASE=flightadvisor
    ports:
      - "3307:3306"
    volumes:
      - ./mysql-dump:/docker-entrypoint-initdb.d
      - db:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  app:
    depends_on:
      mysqldb:
        condition: service_healthy
      cache:
        condition: service_started
      broker:
        condition: service_started
      zookeeper:
        condition: service_started
    build: ./
    restart: on-failure
    ports:
      - "6868:8080"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.driver-class-name": "com.mysql.cj.jdbc.Driver",
        "spring.datasource.url": "jdbc:mysql://mysqldb:3306/flightadvisor?createDatabaseIfNotExist=true&useSSL=false",
        "spring.datasource.username": "root",
        "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.MySQL5Dialect",
        "flightadvisor.app.jwtCookieName": "flightadvisor-jwt",
        "flightadvisor.app.jwtSecret": "3I70uAdMQq5yIl4FeBvjV9faL0PKpxeE",
        "flightadvisor.app.jwtExpirationMs": "86400000",
        "spring.servlet.multipart.max-file-size": "10MB",
        "spring.servlet.multipart.max-request-size": "10MB",
        "spring.redis.host": "cache",
        "spring.redis.port": "6379",
        "spring.redis.password": "eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81",
        "spring.cloud.stream.kafka.binder.brokers": "broker:29092",
        "spring.cloud.stream.kafka.binder.auto-add-partitions": true,
        "spring.cloud.stream.kafka.binder.min-partition-count": 2,
        "spring.cloud.stream.kafka.bindings.comments-in-0.consumer.configuration.key.deserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "spring.cloud.stream.kafka.bindings.comments-in-0.consumer.configuration.value.deserializer": "org.springframework.kafka.support.serializer.JsonDeserializer",
        "spring.cloud.stream.kafka.binder.consumer-properties.spring.json.trusted.packages": "com.losmilos.flightadvisor.model.dto.*",
        "spring.cloud.stream.kafka.bindings.comments-out-0.producer.configuration.key.serializer": "org.apache.kafka.common.serialization.StringSerializer",
        "spring.cloud.stream.kafka.bindings.comments-out-0.producer.configuration.value.serializer": "org.springframework.kafka.support.serializer.JsonSerializer",
        "spring.cloud.stream.bindings.comments-in-0.destination": "comments",
        "spring.cloud.stream.bindings.comments-in-0.consumer.use-native-decoding": true,
        "spring.cloud.stream.bindings.comments-out-0.destination": "comments",
        "spring.cloud.stream.bindings.comments-out-0.producer.use-native-encoding": true
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

volumes:
  db:
  cache:
    driver: local